(* ::Package:: *)

(* ::Input:: *)
(*w*)


(* ::Input:: *)
(*P={}*)


(* ::Input:: *)
(*b[x_,y_,z_]:=Piecewise[{{{{z,0,0},{0,z,0},{0,0,z}},x==y==0},{{{0,y,y},{y,0,y},{y,y,0},{0,y,-y},{y,0,-y},{y,-y,0}},x==0&&y==z},{{{0,y,z},{y,0,z},{y,z,0},{0,z,y},{z,0,y},{z,y,0},{0,-y,z},{-y,0,z},{-y,z,0},{0,z,-y},{z,0,-y},{z,-y,0}},x==0&&y!=z},{{{x,x,x},{-x,x,x},{x,-x,x},{x,x,-x}},x==y==z!=0},{{{z,x,x},{x,z,x},{x,x,z},{-z,x,x},{x,-z,x},{x,x,-z},{-x,x,z},{x,-x,z},{-x,z,x},{x,z,-x},{z,-x,x},{z,x,-x}},x==y&&x!=0&&z!=0},{{{x,y,y},{y,x,y},{y,y,x},{-x,y,y},{y,-x,y},{y,y,-x},{-y,y,x},{y,-y,x},{-y,x,y},{y,x,-y},{x,-y,y},{x,y,-y}},y==z&&y!=0&&x!=0},{{{x,y,z},{-x,y,z},{x,-y,z},{x,y,-z},{y,x,z},{-y,x,z},{y,-x,z},{y,x,-z},{y,z,x},{-y,z,x},{y,-z,x},{y,z,-x},{x,z,y},{-x,z,y},{x,-z,y},{x,z,-y},{z,x,y},{-z,x,y},{z,-x,y},{z,x,-y},{z,y,x},{-z,y,x},{z,-y,x},{z,y,-x}},x!=y&&x!=z&&y!=z&&x!=0&&y!=0&&z!=0}}]*)


(* ::Input:: *)
(*For[i=0, i<=1000, i=i+1,*)
(*For[j=i, j<=1000, j=j+1,*)
(*For[k=j, k<=1000, k=k+1,*)
(*If[2^IntegerExponent[(i^2+j^2+k^2),2]*3^IntegerExponent[(i^2+j^2+k^2),3]*11^IntegerExponent[(i^2+j^2+k^2),11]==(i^2+j^2+k^2),*)
(*If[GCD[i,j,k]==1,*)
(*AppendTo[P,b[i,j,k]*)
(*]*)
(*]*)
(*]*)
(*]*)
(*]*)
(*]*)
(*(*This is a useful piece of code. One asks Mathematica to find the integer exponent of each prime you're interested in. Then you raise the individual primes to their integer exponents and have Mathematica check to see if, multiplied together, this gives you the norm squared. If it does, you know that your norm squared is only divisible by the requesite primes. Using the AppendTo function, you can then get mathematica to add all the good vectors to your master list.*)*)


(* ::Input:: *)
(*V=Partition[Flatten[P],3]*)


(* ::Input:: *)
(*W={{1,0,0},{1,0,-1},{1,-1,0}}*)


(* ::Input:: *)
(*B={}*)


(* ::Input:: *)
(*B'={}*)
(*Q=Complement[V,B]*)
(*For[i=1,i<=Length[Q],i=i+1,*)
(*For[k=1,k<=Length[W],k=k+1,*)
(*If[Q[[i]] . W[[k]]==0,*)
(*AppendTo[B',Q[[i]]],Unevaluated[Sequence[]]]]]*)
(*MM=DeleteDuplicates[B']*)
(*B=Union[B,MM]*)
(*For[j=1,j<= Length[MM],j=j+1,*)
(*For[l=j, l<= Length[B],l=l+1,*)
(*If[MM[[j]] . B[[l]]==0,*)
(*AppendTo[W,Cross[MM[[j]],B[[l]]]/GCD[Cross[MM[[j]],B[[l]]][[1]],Cross[MM[[j]],B[[l]]][[2]],Cross[MM[[j]],B[[l]]][[3]]]],Unevaluated[Sequence[]]]]]*)
(*For[j=1,j<= Length[MM],j=j+1,*)
(*For[l=j, l<= Length[MM],l=l+1,*)
(*If[MM[[j]] . MM[[l]]==0,*)
(*AppendTo[W,Cross[MM[[j]],MM[[l]]]/GCD[Cross[MM[[j]],MM[[l]]][[1]],Cross[MM[[j]],MM[[l]]][[2]],Cross[MM[[j]],MM[[l]]][[3]]]],Unevaluated[Sequence[]]]]]*)
(*W=DeleteDuplicates[W]*)


(* ::Input:: *)
(*B'={}*)
(*Q=Complement[V,B]*)
(*For[i=1,i<=Length[Q],i=i+1,*)
(*For[k=1,k<=Length[W],k=k+1,*)
(*If[Q[[i]] . W[[k]]==0,*)
(*AppendTo[B',Q[[i]]],Unevaluated[Sequence[]]]]]*)
(*MM=DeleteDuplicates[B']*)
(*B=Union[B,MM]*)
(*For[j=1,j<= Length[MM],j=j+1,*)
(*For[l=j, l<= Length[B],l=l+1,*)
(*If[MM[[j]] . B[[l]]==0,*)
(*AppendTo[W,Cross[MM[[j]],B[[l]]]/GCD[Cross[MM[[j]],B[[l]]][[1]],Cross[MM[[j]],B[[l]]][[2]],Cross[MM[[j]],B[[l]]][[3]]]],Unevaluated[Sequence[]]]]]*)
(*For[j=1,j<= Length[MM],j=j+1,*)
(*For[l=j, l<= Length[MM],l=l+1,*)
(*If[MM[[j]] . MM[[l]]==0,*)
(*AppendTo[W,Cross[MM[[j]],MM[[l]]]/GCD[Cross[MM[[j]],MM[[l]]][[1]],Cross[MM[[j]],MM[[l]]][[2]],Cross[MM[[j]],MM[[l]]][[3]]]],Unevaluated[Sequence[]]]]]*)
(*W=DeleteDuplicates[W]*)


(* ::Input:: *)
(*B'={}*)
(*Q=Complement[V,B]*)
(*For[i=1,i<=Length[Q],i=i+1,*)
(*For[k=1,k<=Length[W],k=k+1,*)
(*If[Q[[i]] . W[[k]]==0,*)
(*AppendTo[B',Q[[i]]],Unevaluated[Sequence[]]]]]*)
(*MM=DeleteDuplicates[B']*)
(*B=Union[B,MM]*)
(*For[j=1,j<= Length[MM],j=j+1,*)
(*For[l=j, l<= Length[B],l=l+1,*)
(*If[MM[[j]] . B[[l]]==0,*)
(*AppendTo[W,Cross[MM[[j]],B[[l]]]/GCD[Cross[MM[[j]],B[[l]]][[1]],Cross[MM[[j]],B[[l]]][[2]],Cross[MM[[j]],B[[l]]][[3]]]],Unevaluated[Sequence[]]]]]*)
(*For[j=1,j<= Length[MM],j=j+1,*)
(*For[l=j, l<= Length[MM],l=l+1,*)
(*If[MM[[j]] . MM[[l]]==0,*)
(*AppendTo[W,Cross[MM[[j]],MM[[l]]]/GCD[Cross[MM[[j]],MM[[l]]][[1]],Cross[MM[[j]],MM[[l]]][[2]],Cross[MM[[j]],MM[[l]]][[3]]]],Unevaluated[Sequence[]]]]]*)
(*W=DeleteDuplicates[W]*)


(* ::Input:: *)
(*B'={}*)
(*Q=Complement[V,B]*)
(*For[i=1,i<=Length[Q],i=i+1,*)
(*For[k=1,k<=Length[W],k=k+1,*)
(*If[Q[[i]] . W[[k]]==0,*)
(*AppendTo[B',Q[[i]]],Unevaluated[Sequence[]]]]]*)
(*MM=DeleteDuplicates[B']*)
(*B=Union[B,MM]*)
(*For[j=1,j<= Length[MM],j=j+1,*)
(*For[l=j, l<= Length[B],l=l+1,*)
(*If[MM[[j]] . B[[l]]==0,*)
(*AppendTo[W,Cross[MM[[j]],B[[l]]]/GCD[Cross[MM[[j]],B[[l]]][[1]],Cross[MM[[j]],B[[l]]][[2]],Cross[MM[[j]],B[[l]]][[3]]]],Unevaluated[Sequence[]]]]]*)
(*For[j=1,j<= Length[MM],j=j+1,*)
(*For[l=j, l<= Length[MM],l=l+1,*)
(*If[MM[[j]] . MM[[l]]==0,*)
(*AppendTo[W,Cross[MM[[j]],MM[[l]]]/GCD[Cross[MM[[j]],MM[[l]]][[1]],Cross[MM[[j]],MM[[l]]][[2]],Cross[MM[[j]],MM[[l]]][[3]]]],Unevaluated[Sequence[]]]]]*)
(*W=DeleteDuplicates[W]*)


(* ::Input:: *)
(*B'={}*)
(*Q=Complement[V,B]*)
(*For[i=1,i<=Length[Q],i=i+1,*)
(*For[k=1,k<=Length[W],k=k+1,*)
(*If[Q[[i]] . W[[k]]==0,*)
(*AppendTo[B',Q[[i]]],Unevaluated[Sequence[]]]]]*)
(*MM=DeleteDuplicates[B']*)
(*B=Union[B,MM]*)
(*For[j=1,j<= Length[MM],j=j+1,*)
(*For[l=j, l<= Length[B],l=l+1,*)
(*If[MM[[j]] . B[[l]]==0,*)
(*AppendTo[W,Cross[MM[[j]],B[[l]]]/GCD[Cross[MM[[j]],B[[l]]][[1]],Cross[MM[[j]],B[[l]]][[2]],Cross[MM[[j]],B[[l]]][[3]]]],Unevaluated[Sequence[]]]]]*)
(*For[j=1,j<= Length[MM],j=j+1,*)
(*For[l=j, l<= Length[MM],l=l+1,*)
(*If[MM[[j]] . MM[[l]]==0,*)
(*AppendTo[W,Cross[MM[[j]],MM[[l]]]/GCD[Cross[MM[[j]],MM[[l]]][[1]],Cross[MM[[j]],MM[[l]]][[2]],Cross[MM[[j]],MM[[l]]][[3]]]],Unevaluated[Sequence[]]]]]*)
(*W=DeleteDuplicates[W]*)


(* ::Input:: *)
(*B'={}*)
(*Q=Complement[V,B]*)
(*For[i=1,i<=Length[Q],i=i+1,*)
(*For[k=1,k<=Length[W],k=k+1,*)
(*If[Q[[i]] . W[[k]]==0,*)
(*AppendTo[B',Q[[i]]],Unevaluated[Sequence[]]]]]*)
(*MM=DeleteDuplicates[B']*)
(*B=Union[B,MM]*)
(*For[j=1,j<= Length[MM],j=j+1,*)
(*For[l=j, l<= Length[B],l=l+1,*)
(*If[MM[[j]] . B[[l]]==0,*)
(*AppendTo[W,Cross[MM[[j]],B[[l]]]/GCD[Cross[MM[[j]],B[[l]]][[1]],Cross[MM[[j]],B[[l]]][[2]],Cross[MM[[j]],B[[l]]][[3]]]],Unevaluated[Sequence[]]]]]*)
(*For[j=1,j<= Length[MM],j=j+1,*)
(*For[l=j, l<= Length[MM],l=l+1,*)
(*If[MM[[j]] . MM[[l]]==0,*)
(*AppendTo[W,Cross[MM[[j]],MM[[l]]]/GCD[Cross[MM[[j]],MM[[l]]][[1]],Cross[MM[[j]],MM[[l]]][[2]],Cross[MM[[j]],MM[[l]]][[3]]]],Unevaluated[Sequence[]]]]]*)
(*W=DeleteDuplicates[W]*)


(* ::Input:: *)
(*Intersection[B,W]*)
